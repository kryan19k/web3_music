/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PortfolioIndexImport } from './routes/portfolio/index'
import { Route as PagsIndexImport } from './routes/pags/index'
import { Route as MarketplaceIndexImport } from './routes/marketplace/index'
import { Route as FeedIndexImport } from './routes/feed/index'
import { Route as ProfileSetupImport } from './routes/profile/setup'
import { Route as ProfileSettingsImport } from './routes/profile/settings'
import { Route as ProfileUserIdImport } from './routes/profile/$userId'
import { Route as MarketplaceNftIdImport } from './routes/marketplace/$nftId'
import { Route as ArtistUploadImport } from './routes/artist/upload'
import { Route as ArtistDashboardImport } from './routes/artist/dashboard'
import { Route as ArtistApplicationStatusImport } from './routes/artist/application-status'
import { Route as ArtistSignupIndexImport } from './routes/artist/signup/index'
import { Route as MarketplacePurchaseNftIdImport } from './routes/marketplace/purchase/$nftId'

// Create Virtual Routes

const PlaylistsLazyImport = createFileRoute('/playlists')()
const AdminLazyImport = createFileRoute('/admin')()
const PlaylistPlaylistIdLazyImport = createFileRoute('/playlist/$playlistId')()

// Create/Update Routes

const PlaylistsLazyRoute = PlaylistsLazyImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/playlists.lazy').then((d) => d.Route))

const AdminLazyRoute = AdminLazyImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PortfolioIndexRoute = PortfolioIndexImport.update({
  id: '/portfolio/',
  path: '/portfolio/',
  getParentRoute: () => rootRoute,
} as any)

const PagsIndexRoute = PagsIndexImport.update({
  id: '/pags/',
  path: '/pags/',
  getParentRoute: () => rootRoute,
} as any)

const MarketplaceIndexRoute = MarketplaceIndexImport.update({
  id: '/marketplace/',
  path: '/marketplace/',
  getParentRoute: () => rootRoute,
} as any)

const FeedIndexRoute = FeedIndexImport.update({
  id: '/feed/',
  path: '/feed/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistPlaylistIdLazyRoute = PlaylistPlaylistIdLazyImport.update({
  id: '/playlist/$playlistId',
  path: '/playlist/$playlistId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/playlist/$playlistId.lazy').then((d) => d.Route),
)

const ProfileSetupRoute = ProfileSetupImport.update({
  id: '/profile/setup',
  path: '/profile/setup',
  getParentRoute: () => rootRoute,
} as any)

const ProfileSettingsRoute = ProfileSettingsImport.update({
  id: '/profile/settings',
  path: '/profile/settings',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUserIdRoute = ProfileUserIdImport.update({
  id: '/profile/$userId',
  path: '/profile/$userId',
  getParentRoute: () => rootRoute,
} as any)

const MarketplaceNftIdRoute = MarketplaceNftIdImport.update({
  id: '/marketplace/$nftId',
  path: '/marketplace/$nftId',
  getParentRoute: () => rootRoute,
} as any)

const ArtistUploadRoute = ArtistUploadImport.update({
  id: '/artist/upload',
  path: '/artist/upload',
  getParentRoute: () => rootRoute,
} as any)

const ArtistDashboardRoute = ArtistDashboardImport.update({
  id: '/artist/dashboard',
  path: '/artist/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ArtistApplicationStatusRoute = ArtistApplicationStatusImport.update({
  id: '/artist/application-status',
  path: '/artist/application-status',
  getParentRoute: () => rootRoute,
} as any)

const ArtistSignupIndexRoute = ArtistSignupIndexImport.update({
  id: '/artist/signup/',
  path: '/artist/signup/',
  getParentRoute: () => rootRoute,
} as any)

const MarketplacePurchaseNftIdRoute = MarketplacePurchaseNftIdImport.update({
  id: '/marketplace/purchase/$nftId',
  path: '/marketplace/purchase/$nftId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminLazyImport
      parentRoute: typeof rootRoute
    }
    '/playlists': {
      id: '/playlists'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsLazyImport
      parentRoute: typeof rootRoute
    }
    '/artist/application-status': {
      id: '/artist/application-status'
      path: '/artist/application-status'
      fullPath: '/artist/application-status'
      preLoaderRoute: typeof ArtistApplicationStatusImport
      parentRoute: typeof rootRoute
    }
    '/artist/dashboard': {
      id: '/artist/dashboard'
      path: '/artist/dashboard'
      fullPath: '/artist/dashboard'
      preLoaderRoute: typeof ArtistDashboardImport
      parentRoute: typeof rootRoute
    }
    '/artist/upload': {
      id: '/artist/upload'
      path: '/artist/upload'
      fullPath: '/artist/upload'
      preLoaderRoute: typeof ArtistUploadImport
      parentRoute: typeof rootRoute
    }
    '/marketplace/$nftId': {
      id: '/marketplace/$nftId'
      path: '/marketplace/$nftId'
      fullPath: '/marketplace/$nftId'
      preLoaderRoute: typeof MarketplaceNftIdImport
      parentRoute: typeof rootRoute
    }
    '/profile/$userId': {
      id: '/profile/$userId'
      path: '/profile/$userId'
      fullPath: '/profile/$userId'
      preLoaderRoute: typeof ProfileUserIdImport
      parentRoute: typeof rootRoute
    }
    '/profile/settings': {
      id: '/profile/settings'
      path: '/profile/settings'
      fullPath: '/profile/settings'
      preLoaderRoute: typeof ProfileSettingsImport
      parentRoute: typeof rootRoute
    }
    '/profile/setup': {
      id: '/profile/setup'
      path: '/profile/setup'
      fullPath: '/profile/setup'
      preLoaderRoute: typeof ProfileSetupImport
      parentRoute: typeof rootRoute
    }
    '/playlist/$playlistId': {
      id: '/playlist/$playlistId'
      path: '/playlist/$playlistId'
      fullPath: '/playlist/$playlistId'
      preLoaderRoute: typeof PlaylistPlaylistIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/feed/': {
      id: '/feed/'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof FeedIndexImport
      parentRoute: typeof rootRoute
    }
    '/marketplace/': {
      id: '/marketplace/'
      path: '/marketplace'
      fullPath: '/marketplace'
      preLoaderRoute: typeof MarketplaceIndexImport
      parentRoute: typeof rootRoute
    }
    '/pags/': {
      id: '/pags/'
      path: '/pags'
      fullPath: '/pags'
      preLoaderRoute: typeof PagsIndexImport
      parentRoute: typeof rootRoute
    }
    '/portfolio/': {
      id: '/portfolio/'
      path: '/portfolio'
      fullPath: '/portfolio'
      preLoaderRoute: typeof PortfolioIndexImport
      parentRoute: typeof rootRoute
    }
    '/marketplace/purchase/$nftId': {
      id: '/marketplace/purchase/$nftId'
      path: '/marketplace/purchase/$nftId'
      fullPath: '/marketplace/purchase/$nftId'
      preLoaderRoute: typeof MarketplacePurchaseNftIdImport
      parentRoute: typeof rootRoute
    }
    '/artist/signup/': {
      id: '/artist/signup/'
      path: '/artist/signup'
      fullPath: '/artist/signup'
      preLoaderRoute: typeof ArtistSignupIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminLazyRoute
  '/playlists': typeof PlaylistsLazyRoute
  '/artist/application-status': typeof ArtistApplicationStatusRoute
  '/artist/dashboard': typeof ArtistDashboardRoute
  '/artist/upload': typeof ArtistUploadRoute
  '/marketplace/$nftId': typeof MarketplaceNftIdRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/profile/setup': typeof ProfileSetupRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdLazyRoute
  '/feed': typeof FeedIndexRoute
  '/marketplace': typeof MarketplaceIndexRoute
  '/pags': typeof PagsIndexRoute
  '/portfolio': typeof PortfolioIndexRoute
  '/marketplace/purchase/$nftId': typeof MarketplacePurchaseNftIdRoute
  '/artist/signup': typeof ArtistSignupIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminLazyRoute
  '/playlists': typeof PlaylistsLazyRoute
  '/artist/application-status': typeof ArtistApplicationStatusRoute
  '/artist/dashboard': typeof ArtistDashboardRoute
  '/artist/upload': typeof ArtistUploadRoute
  '/marketplace/$nftId': typeof MarketplaceNftIdRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/profile/setup': typeof ProfileSetupRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdLazyRoute
  '/feed': typeof FeedIndexRoute
  '/marketplace': typeof MarketplaceIndexRoute
  '/pags': typeof PagsIndexRoute
  '/portfolio': typeof PortfolioIndexRoute
  '/marketplace/purchase/$nftId': typeof MarketplacePurchaseNftIdRoute
  '/artist/signup': typeof ArtistSignupIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminLazyRoute
  '/playlists': typeof PlaylistsLazyRoute
  '/artist/application-status': typeof ArtistApplicationStatusRoute
  '/artist/dashboard': typeof ArtistDashboardRoute
  '/artist/upload': typeof ArtistUploadRoute
  '/marketplace/$nftId': typeof MarketplaceNftIdRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/profile/setup': typeof ProfileSetupRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdLazyRoute
  '/feed/': typeof FeedIndexRoute
  '/marketplace/': typeof MarketplaceIndexRoute
  '/pags/': typeof PagsIndexRoute
  '/portfolio/': typeof PortfolioIndexRoute
  '/marketplace/purchase/$nftId': typeof MarketplacePurchaseNftIdRoute
  '/artist/signup/': typeof ArtistSignupIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/playlists'
    | '/artist/application-status'
    | '/artist/dashboard'
    | '/artist/upload'
    | '/marketplace/$nftId'
    | '/profile/$userId'
    | '/profile/settings'
    | '/profile/setup'
    | '/playlist/$playlistId'
    | '/feed'
    | '/marketplace'
    | '/pags'
    | '/portfolio'
    | '/marketplace/purchase/$nftId'
    | '/artist/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/playlists'
    | '/artist/application-status'
    | '/artist/dashboard'
    | '/artist/upload'
    | '/marketplace/$nftId'
    | '/profile/$userId'
    | '/profile/settings'
    | '/profile/setup'
    | '/playlist/$playlistId'
    | '/feed'
    | '/marketplace'
    | '/pags'
    | '/portfolio'
    | '/marketplace/purchase/$nftId'
    | '/artist/signup'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/playlists'
    | '/artist/application-status'
    | '/artist/dashboard'
    | '/artist/upload'
    | '/marketplace/$nftId'
    | '/profile/$userId'
    | '/profile/settings'
    | '/profile/setup'
    | '/playlist/$playlistId'
    | '/feed/'
    | '/marketplace/'
    | '/pags/'
    | '/portfolio/'
    | '/marketplace/purchase/$nftId'
    | '/artist/signup/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminLazyRoute: typeof AdminLazyRoute
  PlaylistsLazyRoute: typeof PlaylistsLazyRoute
  ArtistApplicationStatusRoute: typeof ArtistApplicationStatusRoute
  ArtistDashboardRoute: typeof ArtistDashboardRoute
  ArtistUploadRoute: typeof ArtistUploadRoute
  MarketplaceNftIdRoute: typeof MarketplaceNftIdRoute
  ProfileUserIdRoute: typeof ProfileUserIdRoute
  ProfileSettingsRoute: typeof ProfileSettingsRoute
  ProfileSetupRoute: typeof ProfileSetupRoute
  PlaylistPlaylistIdLazyRoute: typeof PlaylistPlaylistIdLazyRoute
  FeedIndexRoute: typeof FeedIndexRoute
  MarketplaceIndexRoute: typeof MarketplaceIndexRoute
  PagsIndexRoute: typeof PagsIndexRoute
  PortfolioIndexRoute: typeof PortfolioIndexRoute
  MarketplacePurchaseNftIdRoute: typeof MarketplacePurchaseNftIdRoute
  ArtistSignupIndexRoute: typeof ArtistSignupIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminLazyRoute: AdminLazyRoute,
  PlaylistsLazyRoute: PlaylistsLazyRoute,
  ArtistApplicationStatusRoute: ArtistApplicationStatusRoute,
  ArtistDashboardRoute: ArtistDashboardRoute,
  ArtistUploadRoute: ArtistUploadRoute,
  MarketplaceNftIdRoute: MarketplaceNftIdRoute,
  ProfileUserIdRoute: ProfileUserIdRoute,
  ProfileSettingsRoute: ProfileSettingsRoute,
  ProfileSetupRoute: ProfileSetupRoute,
  PlaylistPlaylistIdLazyRoute: PlaylistPlaylistIdLazyRoute,
  FeedIndexRoute: FeedIndexRoute,
  MarketplaceIndexRoute: MarketplaceIndexRoute,
  PagsIndexRoute: PagsIndexRoute,
  PortfolioIndexRoute: PortfolioIndexRoute,
  MarketplacePurchaseNftIdRoute: MarketplacePurchaseNftIdRoute,
  ArtistSignupIndexRoute: ArtistSignupIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/playlists",
        "/artist/application-status",
        "/artist/dashboard",
        "/artist/upload",
        "/marketplace/$nftId",
        "/profile/$userId",
        "/profile/settings",
        "/profile/setup",
        "/playlist/$playlistId",
        "/feed/",
        "/marketplace/",
        "/pags/",
        "/portfolio/",
        "/marketplace/purchase/$nftId",
        "/artist/signup/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.lazy.tsx"
    },
    "/playlists": {
      "filePath": "playlists.lazy.tsx"
    },
    "/artist/application-status": {
      "filePath": "artist/application-status.tsx"
    },
    "/artist/dashboard": {
      "filePath": "artist/dashboard.tsx"
    },
    "/artist/upload": {
      "filePath": "artist/upload.tsx"
    },
    "/marketplace/$nftId": {
      "filePath": "marketplace/$nftId.tsx"
    },
    "/profile/$userId": {
      "filePath": "profile/$userId.tsx"
    },
    "/profile/settings": {
      "filePath": "profile/settings.tsx"
    },
    "/profile/setup": {
      "filePath": "profile/setup.tsx"
    },
    "/playlist/$playlistId": {
      "filePath": "playlist/$playlistId.lazy.tsx"
    },
    "/feed/": {
      "filePath": "feed/index.tsx"
    },
    "/marketplace/": {
      "filePath": "marketplace/index.tsx"
    },
    "/pags/": {
      "filePath": "pags/index.tsx"
    },
    "/portfolio/": {
      "filePath": "portfolio/index.tsx"
    },
    "/marketplace/purchase/$nftId": {
      "filePath": "marketplace/purchase/$nftId.tsx"
    },
    "/artist/signup/": {
      "filePath": "artist/signup/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
